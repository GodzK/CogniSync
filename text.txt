import React, { useState, useEffect } from "react";
import "./App.css";
import axios from "axios";
import { jwtDecode } from "jwt-decode";
import {
  Button,
  TextField,
  Select,
  MenuItem,
  FormControlLabel,
  Checkbox,
  Modal,
  Box,
  InputLabel,
  FormControl,
} from "@mui/material";

const style = {
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: 400,
  bgcolor: "background.paper",
  border: "2px solid #000",
  boxShadow: 24,
  p: 4,
};

function App() {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem("token"));
  const [isLogin, setIsLogin] = useState(true);
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [role, setRole] = useState("user");

  useEffect(() => {
    if (token && !user) {
      const decoded = jwtDecode(token);
      setUser({ id: decoded.id, role: decoded.role, username: decoded.username });
      axios.defaults.headers.common["Authorization"] = `Bearer ${token}`;
    }
  }, [token, user]);

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const res = await axios.post("/api/login", { username, password });
      localStorage.setItem("token", res.data.token);
      setToken(res.data.token);
      setUser(res.data.user);
    } catch (err) {
      alert(err.response?.data?.error || "Error");
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    try {
      await axios.post("/api/register", { username, password, role });
      alert("Registered. Now login.");
      setIsLogin(true);
    } catch (err) {
      alert(err.response?.data?.error || "Error");
    }
  };

  const logout = () => {
    localStorage.removeItem("token");
    setToken(null);
    setUser(null);
  };

  if (!user) {
    return (
      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          height: "100vh",
          flexDirection: "column",
        }}
      >
        <h2>{isLogin ? "Login" : "Register"}</h2>
        <form onSubmit={isLogin ? handleLogin : handleRegister}>
          <TextField
            label="Username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            fullWidth
            margin="normal"
          />
          <TextField
            label="Password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            fullWidth
            margin="normal"
          />
          {!isLogin && (
            <FormControl fullWidth margin="normal">
              <InputLabel>Role</InputLabel>
              <Select value={role} onChange={(e) => setRole(e.target.value)}>
                <MenuItem value="user">User</MenuItem>
                <MenuItem value="manager">Manager</MenuItem>
              </Select>
            </FormControl>
          )}
          <Button type="submit" variant="contained" fullWidth>
            {isLogin ? "Login" : "Register"}
          </Button>
        </form>
        <Button onClick={() => setIsLogin(!isLogin)}>
          {isLogin ? "Switch to Register" : "Switch to Login"}
        </Button>
      </Box>
    );
  }

  return <TaskManager user={user} logout={logout} />;
}

function TaskManager({ user, logout }) {
  const [tasks, setTasks] = useState([]);
  const [schedules, setSchedules] = useState([]);
  const [usersList, setUsersList] = useState([]);
  const [showTaskModal, setShowTaskModal] = useState(false);
  const [showScheduleModal, setShowScheduleModal] = useState(false);
  const [newTask, setNewTask] = useState({
    name: "",
    status: "progress",
    assignedTo: "",
    isUpcoming: false,
    dueDate: "",
  });
  const [newSchedule, setNewSchedule] = useState({
    date: "",
    startTime: "",
    endTime: "",
    name: "",
    members: [],
    color: "yellow",
  });
  const [currentView, setCurrentView] = useState("main");
  const [fontSize, setFontSize] = useState("medium");
  const [theme, setTheme] = useState("default");

  const defaultAvatar = "https://via.placeholder.com/40";

  useEffect(() => {
    fetchData();
    axios
      .get("/api/users")
      .then((res) => {
        if (user.role === "manager") {
          setUsersList(res.data);
        } else {
          setUsersList(res.data.filter((u) => u.id === user.id));
        }
      })
      .catch((err) => {
        console.error("Error fetching users:", err.response?.data?.error || err.message);
      });
  }, [user]);

  const fetchData = async () => {
    try {
      const tasksRes = await axios.get("/api/tasks");
      setTasks(tasksRes.data);
      const schedRes = await axios.get("/api/schedules");
      setSchedules(schedRes.data);
    } catch (err) {
      console.error("Error fetching data:", err.response?.data?.error || err.message);
    }
  };

  const handleCheck = async (id, checked) => {
    try {
      await axios.put(`/api/tasks/${id}`, { checked });
      fetchData();
    } catch (err) {
      console.error("Error updating task:", err.response?.data?.error || err.message);
    }
  };

  const addTask = async (e) => {
    e.preventDefault();
    try {
      await axios.post("/api/tasks", newTask);
      setShowTaskModal(false);
      setNewTask({
        name: "",
        status: "progress",
        assignedTo: "",
        isUpcoming: false,
        dueDate: "",
      });
      fetchData();
    } catch (err) {
      console.error("Add task error:", err.response?.data);
      alert(err.response?.data?.error || "Failed to add task");
    }
  };

  const addSchedule = async (e) => {
    e.preventDefault();
    const time = `${newSchedule.date} ${newSchedule.startTime} - ${newSchedule.endTime}`;
    try {
      await axios.post("/api/schedules", { ...newSchedule, time });
      setShowScheduleModal(false);
      setNewSchedule({
        date: "",
        startTime: "",
        endTime: "",
        name: "",
        members: [],
        color: "yellow",
      });
      fetchData();
    } catch (err) {
      console.error("Add schedule error:", err.response?.data);
      alert(err.response?.data?.error || "Failed to add schedule");
    }
  };

  const getFontSizeStyle = () => {
    switch (fontSize) {
      case "small":
        return "0.8rem";
      case "medium":
        return "1rem";
      case "large":
        return "1.2rem";
      default:
        return "1rem";
    }
  };

  const currentTasks = tasks.filter((t) => !t.isUpcoming);
  const upcomingTasks = tasks.filter((t) => t.isUpcoming);

  if (currentView === "settings") {
    return (
      <div className={`task-manager ${theme}`} style={{ fontSize: getFontSizeStyle() }}>
        <div className="settings">
          <Button onClick={() => setCurrentView("main")} variant="outlined">
            Back to Main
          </Button>
          <div className="settings-container" style={{ display: "flex", gap: "20px", marginTop: "20px" }}>
            <div className="profile-card" style={{ width: "30%", border: "1px solid #ccc", padding: "20px", borderRadius: "8px" }}>
              <h3>Profile</h3>
              <p>Name: {user.username || "Unknown User"}</p>
              <p>Role: {user.role.charAt(0).toUpperCase() + user.role.slice(1)}</p>
            </div>
            <div className="settings-content" style={{ width: "70%" }}>
              <h3>Settings</h3>
              <div style={{ marginBottom: "20px" }}>
                <h4>Adjust Font Size</h4>
                <Select value={fontSize} onChange={(e) => setFontSize(e.target.value)} fullWidth>
                  <MenuItem value="small">Small</MenuItem>
                  <MenuItem value="medium">Medium</MenuItem>
                  <MenuItem value="large">Large</MenuItem>
                </Select>
              </div>
              <div style={{ marginBottom: "20px" }}>
                <h4>Adjust Color Theme</h4>
                <Select value={theme} onChange={(e) => setTheme(e.target.value)} fullWidth>
                  <MenuItem value="default">Default</MenuItem>
                  <MenuItem value="high-contrast">High Contrast (for visual impairments)</MenuItem>
                  <MenuItem value="low-stimulation">Low Stimulation (non-flashy, for autistic users)</MenuItem>
                  <MenuItem value="colorblind">Colorblind Friendly</MenuItem>
                  <MenuItem value="dark">Dark Mode (reduced brightness)</MenuItem>
                </Select>
              </div>
              <div>
                <h4>Work Hours Graph</h4>
                <div style={{ border: "1px solid #ccc", padding: "20px", textAlign: "center" }}>
                  Mock Graph: Coming Soon
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`task-manager ${theme}`} style={{ fontSize: getFontSizeStyle() }}>
      <div className="page-content">
        <div className="header">
          <img src={defaultAvatar} alt="Profile" style={{ borderRadius: "50%", marginRight: "10px" }} />
          {user.username || "Unknown User"}
          <Button onClick={logout} variant="outlined" style={{ marginLeft: "auto" }}>
            Logout
          </Button>
        </div>
        <div className="tasks-wrapper">
          {user.role === "manager" && (
            <Button onClick={() => setShowTaskModal(true)} variant="contained">
              Add Task
            </Button>
          )}
          {currentTasks.map((task) => (
            <div className="task" key={task.id}>
              <input
                className="task-item"
                name="task"
                type="checkbox"
                id={`item-${task.id}`}
                checked={task.checked}
                onChange={(e) => handleCheck(task.id, e.target.checked)}
              />
              <label htmlFor={`item-${task.id}`}>
                <span className="label-text">{task.name}</span>
              </label>
              <span className={`tag ${task.status}`}>
                {task.status.charAt(0).toUpperCase() + task.status.slice(1)}
              </span>
              <span>
                Assigned to: {usersList.find((u) => u.id === task.assignedTo)?.username || "Unknown User"}
              </span>
              <span>Due: {task.dueDate || "No due date"}</span>
            </div>
          ))}
          <div className="header upcoming">Upcoming Tasks</div>
          {upcomingTasks.map((task) => (
            <div className="task" key={task.id}>
              <input
                className="task-item"
                name="task"
                type="checkbox"
                id={`item-${task.id}`}
                checked={task.checked}
                onChange={(e) => handleCheck(task.id, e.target.checked)}
              />
              <label htmlFor={`item-${task.id}`}>
                <span className="label-text">{task.name}</span>
              </label>
              <span className={`tag ${task.status}`}>
                {task.status.charAt(0).toUpperCase() + task.status.slice(1)}
              </span>
              <span>
                Assigned to: {usersList.find((u) => u.id === task.assignedTo)?.username || "Unknown User"}
              </span>
              <span>Due: {task.dueDate || "No due date"}</span>
            </div>
          ))}
        </div>
      </div>
      <div className="right-bar">
        <div className="top-part">
          <Button onClick={() => setCurrentView("settings")} variant="outlined">
            Settings
          </Button>
        </div>
        <div className="header">
          Schedule{" "}
          {user.role === "manager" && (
            <Button onClick={() => setShowScheduleModal(true)} variant="contained">
              Add Schedule
            </Button>
          )}
        </div>
        <div className="right-content">
          {schedules.map((s) => (
            <div className={`task-box ${s.color}`} key={s.id}>
              <div className="description-task">
                <div className="time">{s.time}</div>
                <div className="task-name">{s.name}</div>
              </div>
              <div className="more-button"></div>
              <div className="members">
                {s.members.map((mId) => {
                  const u = usersList.find((u) => u.id === mId);
                  return u ? (
                    <div key={u.id} className="member-info">
                      <img src={u.avatar || defaultAvatar} alt={u.username} />
                      <span>{u.username}</span>
                    </div>
                  ) : (
                    <div key={mId} className="member-info">
                      <span>Unknown User</span>
                    </div>
                  );
                })}
              </div>
            </div>
          ))}
        </div>
      </div>

      <Modal open={showTaskModal} onClose={() => setShowTaskModal(false)}>
        <Box sx={style}>
          <form onSubmit={addTask}>
            <TextField
              label="Task Name"
              value={newTask.name}
              onChange={(e) => setNewTask({ ...newTask, name: e.target.value })}
              required
              fullWidth
              margin="normal"
            />
            <FormControl fullWidth margin="normal">
              <InputLabel>Status</InputLabel>
              <Select
                value={newTask.status}
                onChange={(e) => setNewTask({ ...newTask, status: e.target.value })}
              >
                <MenuItem value="progress">Progress</MenuItem>
                <MenuItem value="approved">Approved</MenuItem>
                <MenuItem value="review">Review</MenuItem>
                <MenuItem value="waiting">Waiting</MenuItem>
              </Select>
            </FormControl>
            <FormControl fullWidth margin="normal">
              <InputLabel>Assign To</InputLabel>
              <Select
                value={newTask.assignedTo}
                onChange={(e) => setNewTask({ ...newTask, assignedTo: e.target.value })}
                required
              >
                <MenuItem value="">Assign To</MenuItem>
                {usersList
                  .filter((u) => u.role === "user")
                  .map((u) => (
                    <MenuItem key={u.id} value={u.id}>
                      {u.username}
                    </MenuItem>
                  ))}
              </Select>
            </FormControl>
            <TextField
              label="Due Date"
              type="date"
              value={newTask.dueDate}
              onChange={(e) => setNewTask({ ...newTask, dueDate: e.target.value })}
              InputLabelProps={{ shrink: true }}
              fullWidth
              margin="normal"
            />
            <FormControlLabel
              control={
                <Checkbox
                  checked={newTask.isUpcoming}
                  onChange={(e) => setNewTask({ ...newTask, isUpcoming: e.target.checked })}
                />
              }
              label="Upcoming"
            />
            <Button type="submit" variant="contained">
              Add
            </Button>
            <Button onClick={() => setShowTaskModal(false)} variant="outlined">
              Cancel
            </Button>
          </form>
        </Box>
      </Modal>

      <Modal open={showScheduleModal} onClose={() => setShowScheduleModal(false)}>
        <Box sx={style}>
          <form onSubmit={addSchedule}>
            <TextField
              label="Date"
              type="date"
              value={newSchedule.date}
              onChange={(e) => setNewSchedule({ ...newSchedule, date: e.target.value })}
              InputLabelProps={{ shrink: true }}
              required
              fullWidth
              margin="normal"
            />
            <TextField
              label="Start Time"
              type="time"
              value={newSchedule.startTime}
              onChange={(e) => setNewSchedule({ ...newSchedule, startTime: e.target.value })}
              InputLabelProps={{ shrink: true }}
              required
              fullWidth
              margin="normal"
            />
            <TextField
              label="End Time"
              type="time"
              value={newSchedule.endTime}
              onChange={(e) => setNewSchedule({ ...newSchedule, endTime: e.target.value })}
              InputLabelProps={{ shrink: true }}
              required
              fullWidth
              margin="normal"
            />
            <TextField
              label="Schedule Name"
              value={newSchedule.name}
              onChange={(e) => setNewSchedule({ ...newSchedule, name: e.target.value })}
              required
              fullWidth
              margin="normal"
            />
            <FormControl fullWidth margin="normal">
              <InputLabel>Members</InputLabel>
              <Select
                multiple
                value={newSchedule.members}
                onChange={(e) => setNewSchedule({ ...newSchedule, members: e.target.value })}
              >
                {usersList.map((u) => (
                  <MenuItem key={u.id} value={u.id}>
                    {u.username}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <FormControl fullWidth margin="normal">
              <InputLabel>Color</InputLabel>
              <Select
                value={newSchedule.color}
                onChange={(e) => setNewSchedule({ ...newSchedule, color: e.target.value })}
              >
                <MenuItem value="yellow">Yellow</MenuItem>
                <MenuItem value="blue">Blue</MenuItem>
                <MenuItem value="red">Red</MenuItem>
                <MenuItem value="green">Green</MenuItem>
              </Select>
            </FormControl>
            <Button type="submit" variant="contained">
              Add
            </Button>
            <Button onClick={() => setShowScheduleModal(false)} variant="outlined">
              Cancel
            </Button>
          </form>
        </Box>
      </Modal>
    </div>
  );
}
export default App;